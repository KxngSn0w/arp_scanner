#!/usr/bin/env python

"""
Network Scanner Algorithm

Goal -> Discover clients on network.

Steps:
1. Create arp request directed to broadcast MAC asking for IP.
	a. Use ARP to ask who has target IP.
	b. Set destination MAC to broadcast MAC.
2. Send packet and receive response.
3. Parse the response.
4. Print result. 
"""

"""
v1.0

import scapy.all as scapy

def scan(ip):
	scapy.arping(ip)


scan("192.168.1.0/24")
"""

"""
v1.1

import scapy.all as scapy

def scan(ip):
	arp_request = scapy.ARP(pdst=ip)
	arp_request.show()
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	broadcast.show()
	arp_request_broadcast = broadcast/arp_request
	arp_request_broadcast.show()

	# print(arp_request.summary())
	# print(broadcast.summary())
	# scapy.ls(scapy.ARP())
	# scapy.ls(scapy.Ether())

scan("192.168.1.0/24")
"""

"""
v2.0

import scapy.all as scapy

def scan(ip):
	arp_request = scapy.ARP(pdst.ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp request
	answered, unanswered = scapy.srp(arp_request_broadcast, timeout=1)
	print(answered.summary())

scan("192.168.1.0/24")
"""

"""
v3.0

import scapy.all as scapy

def scan(ip):
	arp_request = scapy.ARP(pdst.ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp request
	answered_list, unanswered_list = scapy.srp(arp_request_broadcast, timeout=1)[0]

	for element in answered_list:
		print(element[1].show())
		print(element[1].psrc)
		print(element[1].hwsrc)
		print("-----------------------------------------------------")

scan("192.168.1.0/24")
"""

"""
v4.0

import scapy.all as scapy

def scan(ip):
	arp_request = scapy.ARP(pdst.ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp request
	answered_list = scapy.srp(arp_request_broadcast, timeout=1)[0]

	print("IP\t\t\tMAC Address\n-----------------------------------------------------")
	for element in answered_list:
		print(element[1].psrc) + "\t\t" + print(element[1].hwsrc)

scan("192.168.1.0/24")
"""

"""
Pre-CLI Arguments

import scapy.all as scapy 

def scan(ip):
	arp_request = scapy.ARP(pdst.ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp request
	answered_list = scapy.srp(arp_request_broadcast, timeout=1)[0]

	# List of Dictionaries
	clients_list = []
	for element in answered_list:
		client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
		clients_list.append(client_dict)
	return clients_list

def print_result(results_list):
	print("IP\t\t\tMAC Address\n-----------------------------------------------------")
	for client in results_list:
		print(client["ip"] + "\t\t" + client["mac"])

scan_result = scan("192.168.1.0/24")
print_result(scan_result)
"""

import scapy.all as scapy
import optparse 

def get_arguments():
	parser = optparse.OptionParser()

	parser.add_option("-t", "--target", dest="target", help="Target IP range of the ARP scan")
	(options, arguments) = parser.parse_args()

	if not options.target:
		parser.error("[-] Please specify an interface, use --help for more info.")

	return options


def scan(ip):
	arp_request = scapy.ARP(pdst.ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp request
	answered_list = scapy.srp(arp_request_broadcast, timeout=1)[0]

	# List of Dictionaries
	clients_list = []
	for element in answered_list:
		client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
		clients_list.append(client_dict)
	return clients_list


def print_result(results_list):
	print("IP\t\t\tMAC Address\n-----------------------------------------------------")
	for client in results_list:
		print(client["ip"] + "\t\t" + client["mac"])


options = get_arguments()
scan_result = scan(options.target)
print_result(scan_result)
